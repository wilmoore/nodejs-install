#!/usr/bin/env bash

#
# strict is better.
#

set -e
set -o errexit
set -o errtrace
set -o nounset

#
# program name.
#

declare NAME=`basename $0`

#
# colors.
#

declare COLOR_NORMAL=`tput sgr0`
declare COLOR_REVERSE=`tput smso`
declare COLOR_ERROR="\e[0;31m"

#
# infer operating system id.
#

os() {
  echo `uname` | tr '[:upper:]' '[:lower:]'
}

#
# infer architecture id.
#

arch() {
  local out=x86
  [[ `uname -m` = 'x86_64' ]] && out=x64
  echo $out
}

#
# build platform id.
#

platform() {
  echo "`os`-`arch`"
}

#
# list all downloadable NodeJS versions.
#

list() {
  curl -L -s http://nodejs.org/dist \
    | egrep -o 'v[0-9]+\.[0-9]+\.[0-9]+' \
    | sort -t. -u -k 1.2,1n -k 2,2n -k 3,3n
}

#
# is version available for download?
#

is_available() {
  list | grep -qw "v$1"
  echo $?
}

#
# print a usage message.
#

function usage {

cat <<USAGESTRING

Usage: $NAME [v]<version> <prefix>

  Examples:

    %  $NAME 4.2.2 \$NODE_VERSIONS
    %  $NAME --list
    %  $NAME --help

  Options:

   -l, --list      List all available Node versions.
   -h, --help      Display help information.

USAGESTRING

}

#
# argument count checking.
#

if [[ $# -lt 1 ]]; then
  usage ; exit 1
fi

#
# long and short argument parsing.
#

while [ $# -gt 0 ]; do

  case $1 in

  -h|--help)

    usage
    exit 0

    ;;

  -l|--list)

    list
    exit 0

    ;;

  --)

    # stop parsing arguments.

    shift
    break

    ;;

  -*)

    # unknown option.

    printf "$COLOR_ERROR%s: %s: unrecognized option$COLOR_NORMAL" $NAME $1 >&2
    echo ""
    usage
    exit 1

    ;;

   *)

    # installation path setup.

    declare NODEJS_VERSION=$(echo $1 | tr -d 'vV')
    declare PREFIX=${2:-""}
    declare TARGET="$PREFIX/node-v$NODEJS_VERSION"
    declare BINDIR="$TARGET/bin"
    break

    ;;

  esac

done

#
# validate version.
#

if [[ `is_available $NODEJS_VERSION` != '0' ]]; then
  printf "${COLOR_ERROR}NodeJS version %s is not available...aborting!${COLOR_NORMAL}" $NODEJS_VERSION >&2
  echo ""
  echo ""
  echo "Hint:"
  echo "> $0 --list"
  exit 1
fi

#
# validate prefix.
#

if [[ -z $PREFIX ]]; then
  printf "${COLOR_ERROR}An installation prefix directory is required...aborting!${COLOR_NORMAL}" >&2
  echo ""
  usage
  exit 1
fi

#
# abort on existing installation.
#

if [[ -d $TARGET ]]; then
  printf "${COLOR_ERROR}'%s' already exists...aborting!${COLOR_NORMAL}" $TARGET >&2
  exit 1
fi

#
# build download url.
#

declare DOWNLOAD_URL="http://nodejs.org/dist/v$NODEJS_VERSION/node-v$NODEJS_VERSION-`platform`.tar.gz"

#
# install node.
#

mkdir -p $TARGET

trap "rm -rf $TARGET ; exit" SIGHUP SIGINT SIGQUIT SIGABRT SIGKILL

curl -L# "$DOWNLOAD_URL" | tar xz --strip-components=1 -C "$TARGET"

trap - SIGHUP SIGINT SIGQUIT SIGABRT SIGKILL

#
# post-install info.
#

cat <<POSTINSTALL

NodeJS version installed:
$NODEJS_VERSION

Installation Directory:
$TARGET

You should add the following directory to your \$PATH:
$BINDIR
POSTINSTALL
